{"appName": "MyAwesomeApp", "description": "Create a modern weather application that displays current conditions, hourly forecasts, and 7-day weather predictions. Include location-based weather, beautiful animations, and a clean Material Design interface.", "code": "```json\n{\n  \"MainActivity.java\": \"package com.example.myawesomeapp;\\n\\nimport androidx.annotation.NonNull;\\nimport androidx.appcompat.app.AppCompatActivity;\\nimport androidx.core.app.ActivityCompat;\\nimport androidx.recyclerview.widget.LinearLayoutManager;\\nimport androidx.recyclerview.widget.RecyclerView;\\n\\nimport android.Manifest;\\nimport android.content.pm.PackageManager;\\nimport android.location.Location;\\nimport android.os.Bundle;\\nimport android.util.Log;\\nimport android.widget.ImageView;\\nimport android.widget.TextView;\\nimport android.widget.Toast;\\n\\nimport com.android.volley.Request;\\nimport com.android.volley.RequestQueue;\\nimport com.android.volley.Response;\\nimport com.android.volley.VolleyError;\\nimport com.android.volley.toolbox.JsonObjectRequest;\\nimport com.android.volley.toolbox.Volley;\\n\\nimport com.google.android.gms.location.FusedLocationProviderClient;\\nimport com.google.android.gms.location.LocationServices;\\nimport com.squareup.picasso.Picasso;\\n\\nimport org.json.JSONArray;\\nimport org.json.JSONException;\\nimport org.json.JSONObject;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.Locale;\\n\\npublic class MainActivity extends AppCompatActivity {\\n\\n    private static final int LOCATION_PERMISSION_REQUEST_CODE = 100;\\n    private FusedLocationProviderClient fusedLocationClient;\\n    private TextView cityTextView, temperatureTextView, descriptionTextView, dateTextView;\\n    private ImageView weatherIconImageView;\\n    private RecyclerView hourlyForecastRecyclerView, dailyForecastRecyclerView;\\n    private HourlyForecastAdapter hourlyForecastAdapter;\\n    private DailyForecastAdapter dailyForecastAdapter;\\n    private ArrayList<HourlyForecast> hourlyForecastList;\\n    private ArrayList<DailyForecast> dailyForecastList;\\n    private String apiKey = \\\"YOUR_API_KEY\\\"; // Replace with your OpenWeatherMap API key\\n    private double latitude, longitude;\\n\\n    @Override\\n    protected void onCreate(Bundle savedInstanceState) {\\n        super.onCreate(savedInstanceState);\\n        setContentView(R.layout.activity_main);\\n\\n        cityTextView = findViewById(R.id.cityTextView);\\n        temperatureTextView = findViewById(R.id.temperatureTextView);\\n        descriptionTextView = findViewById(R.id.descriptionTextView);\\n        dateTextView = findViewById(R.id.dateTextView);\\n        weatherIconImageView = findViewById(R.id.weatherIconImageView);\\n        hourlyForecastRecyclerView = findViewById(R.id.hourlyForecastRecyclerView);\\n        dailyForecastRecyclerView = findViewById(R.id.dailyForecastRecyclerView);\\n\\n        hourlyForecastList = new ArrayList<>();\\n        dailyForecastList = new ArrayList<>();\\n\\n        hourlyForecastRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));\\n        hourlyForecastAdapter = new HourlyForecastAdapter(hourlyForecastList);\\n        hourlyForecastRecyclerView.setAdapter(hourlyForecastAdapter);\\n\\n        dailyForecastRecyclerView.setLayoutManager(new LinearLayoutManager(this));\\n        dailyForecastAdapter = new DailyForecastAdapter(dailyForecastList);\\n        dailyForecastRecyclerView.setAdapter(dailyForecastAdapter);\\n\\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);\\n\\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\\n            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, LOCATION_PERMISSION_REQUEST_CODE);\\n            return;\\n        }\\n\\n        fetchLocation();\\n    }\\n\\n    private void fetchLocation() {\\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\\n            // TODO: Consider calling\\n            //    ActivityCompat#requestPermissions\\n            // here to request the missing permissions, and then overriding\\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)\\n            // to handle the case where the user grants the permission. See the documentation\\n            // for ActivityCompat#requestPermissions for more details.\\n            return;\\n        }\\n        fusedLocationClient.getLastLocation().addOnSuccessListener(this, location -> {\\n            if (location != null) {\\n                latitude = location.getLatitude();\\n                longitude = location.getLongitude();\\n                fetchWeatherData(latitude, longitude);\\n            } else {\\n                Toast.makeText(this, \\\"Could not get location. Please try again.\\\", Toast.LENGTH_SHORT).show();\\n                // Default location (e.g., London)\\n                fetchWeatherData(51.5074, 0.1278);\\n            }\\n        });\\n    }\\n\\n    @Override\\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\\n        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {\\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\\n                fetchLocation();\\n            } else {\\n                Toast.makeText(this, \\\"Location permission denied. Using default location.\\\", Toast.LENGTH_SHORT).show();\\n                // Default location (e.g., London)\\n                fetchWeatherData(51.5074, 0.1278);\\n            }\\n        }\\n    }\\n\\n    private void fetchWeatherData(double latitude, double longitude) {\\n        String url = \\\"https://api.openweathermap.org/data/2.5/forecast?lat=\\\" + latitude + \\\"&lon=\\\" + longitude + \\\"&appid=\\\" + apiKey + \\\"&units=metric\\\";\\n\\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url, null,\\n                new Response.Listener<JSONObject>() {\\n                    @Override\\n                    public void onResponse(JSONObject response) {\\n                        try {\\n                            JSONObject city = response.getJSONObject(\\\"city\\\");\\n                            String cityName = city.getString(\\\"name\\\");\\n                            cityTextView.setText(cityName);\\n\\n                            JSONArray list = response.getJSONArray(\\\"list\\\");\\n                            hourlyForecastList.clear();\\n                            dailyForecastList.clear();\\n\\n                            SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\", Locale.getDefault());\\n                            SimpleDateFormat dayOfWeekFormat = new SimpleDateFormat(\\\"EEE\\\", Locale.getDefault());\\n\\n                            for (int i = 0; i < list.length(); i++) {\\n                                JSONObject forecast = list.getJSONObject(i);\\n                                JSONObject main = forecast.getJSONObject(\\\"main\\\");\\n                                JSONArray weatherArray = forecast.getJSONArray(\\\"weather\\\");\\n                                JSONObject weather = weatherArray.getJSONObject(0);\\n\\n                                String dateTimeString = forecast.getString(\\\"dt_txt\\\");\\n\\n                                Date dateTime = sdf.parse(dateTimeString);\\n                                if (dateTime == null) continue;\\n\\n                                String time = new SimpleDateFormat(\\\"HH:mm\\\", Locale.getDefault()).format(dateTime);\\n                                String dayOfWeek = dayOfWeekFormat.format(dateTime);\\n                                double temperature = main.getDouble(\\\"temp\\\");\\n                                String description = weather.getString(\\\"description\\\");\\n                                String icon = weather.getString(\\\"icon\\\");\\n                                String iconUrl = \\\"https://openweathermap.org/img/w/\\\" + icon + \\\".png\\\";\\n\\n                                if (i == 0) {\\n                                    temperatureTextView.setText(String.format(Locale.getDefault(), \\\"%.1f\u00b0C\\\", temperature));\\n                                    descriptionTextView.setText(description);\\n                                    Picasso.get().load(iconUrl).into(weatherIconImageView);\\n                                    dateTextView.setText(new SimpleDateFormat(\\\"EEEE, MMMM d\\\", Locale.getDefault()).format(new Date()));\\n                                }\\n\\n                                hourlyForecastList.add(new HourlyForecast(time, temperature, iconUrl));\\n\\n                                // Add to daily forecast (only once per day)\\n                                if (i % 8 == 0) {\\n                                    double dailyTemp = main.getDouble(\\\"temp\\\");\\n                                    String dailyIcon = weather.getString(\\\"icon\\\");\\n                                    String dailyIconUrl = \\\"https://openweathermap.org/img/w/\\\" + dailyIcon + \\\".png\\\";\\n                                    dailyForecastList.add(new DailyForecast(dayOfWeek, dailyTemp, dailyIconUrl));\\n                                }\\n                            }\\n\\n                            hourlyForecastAdapter.notifyDataSetChanged();\\n                            dailyForecastAdapter.notifyDataSetChanged();\\n\\n                        } catch (JSONException e) {\\n                            Log.e(\\\"JSON Error\\\", e.toString());\\n                            e.printStackTrace();\\n                            Toast.makeText(MainActivity.this, \\\"Error parsing weather data.\\\", Toast.LENGTH_SHORT).show();\\n                        } catch (java.text.ParseException e) {\\n                            throw new RuntimeException(e);\\n                        }\\n                    }\\n                },\\n                new Response.ErrorListener() {\\n                    @Override\\n                    public void onErrorResponse(VolleyError error) {\\n                        Log.e(\\\"Volley Error\\\", error.toString());\\n                        Toast.makeText(MainActivity.this, \\\"Error fetching weather data.\\\", Toast.LENGTH_SHORT).show();\\n                    }\\n                });\\n\\n        RequestQueue requestQueue = Volley.newRequestQueue(this);\\n        requestQueue.add(jsonObjectRequest);\\n    }\\n}\\n\",\n  \"activity_main.xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"\\n    xmlns:app=\\\"http://schemas.android.com/apk/res-auto\\\"\\n    xmlns:tools=\\\"http://schemas.android.com/tools\\\"\\n    android:layout_width=\\\"match_parent\\\"\\n    android:layout_height=\\\"match_parent\\\"\\n    android:background=\\\"#B3E5FC\\\"\\n    tools:context=\\\".MainActivity\\\">\\n\\n    <TextView\\n        android:id=\\\"@+id/cityTextView\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:layout_marginTop=\\\"32dp\\\"\\n        android:text=\\\"City Name\\\"\\n        android:textSize=\\\"24sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        app:layout_constraintTop_toTopOf=\\\"parent\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"\\n        app:layout_constraintEnd_toEndOf=\\\"parent\\\"/>\\n\\n    <TextView\\n        android:id=\\\"@+id/dateTextView\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:text=\\\"Date\\\"\\n        android:textSize=\\\"16sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        app:layout_constraintTop_toBottomOf=\\\"@+id/cityTextView\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"\\n        app:layout_constraintEnd_toEndOf=\\\"parent\\\"/>\\n\\n    <ImageView\\n        android:id=\\\"@+id/weatherIconImageView\\\"\\n        android:layout_width=\\\"120dp\\\"\\n        android:layout_height=\\\"120dp\\\"\\n        android:layout_marginTop=\\\"16dp\\\"\\n        app:layout_constraintTop_toBottomOf=\\\"@+id/dateTextView\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"\\n        app:layout_constraintEnd_toEndOf=\\\"parent\\\"\\n        android:contentDescription=\\\"Weather Icon\\\" />\\n\\n    <TextView\\n        android:id=\\\"@+id/temperatureTextView\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:text=\\\"Temperature\\\"\\n        android:textSize=\\\"36sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        app:layout_constraintTop_toBottomOf=\\\"@+id/weatherIconImageView\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"\\n        app:layout_constraintEnd_toEndOf=\\\"parent\\\"/>\\n\\n    <TextView\\n        android:id=\\\"@+id/descriptionTextView\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:text=\\\"Description\\\"\\n        android:textSize=\\\"18sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        app:layout_constraintTop_toBottomOf=\\\"@+id/temperatureTextView\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"\\n        app:layout_constraintEnd_toEndOf=\\\"parent\\\"/>\\n\\n    <TextView\\n        android:id=\\\"@+id/hourlyForecastTitle\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:text=\\\"Hourly Forecast\\\"\\n        android:textSize=\\\"20sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        android:layout_marginTop=\\\"32dp\\\"\\n        android:layout_marginStart=\\\"16dp\\\"\\n        app:layout_constraintTop_toBottomOf=\\\"@+id/descriptionTextView\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"/>\\n\\n    <androidx.recyclerview.widget.RecyclerView\\n        android:id=\\\"@+id/hourlyForecastRecyclerView\\\"\\n        android:layout_width=\\\"0dp\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:layout_marginTop=\\\"8dp\\\"\\n        android:layout_marginStart=\\\"16dp\\\"\\n        android:layout_marginEnd=\\\"16dp\\\"\\n        app:layout_constraintTop_toBottomOf=\\\"@+id/hourlyForecastTitle\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"\\n        app:layout_constraintEnd_toEndOf=\\\"parent\\\" />\\n\\n    <TextView\\n        android:id=\\\"@+id/dailyForecastTitle\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:text=\\\"7-Day Forecast\\\"\\n        android:textSize=\\\"20sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        android:layout_marginTop=\\\"32dp\\\"\\n        android:layout_marginStart=\\\"16dp\\\"\\n        app:layout_constraintTop_toBottomOf=\\\"@+id/hourlyForecastRecyclerView\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"/>\\n\\n    <androidx.recyclerview.widget.RecyclerView\\n        android:id=\\\"@+id/dailyForecastRecyclerView\\\"\\n        android:layout_width=\\\"0dp\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:layout_marginTop=\\\"8dp\\\"\\n        android:layout_marginStart=\\\"16dp\\\"\\n        android:layout_marginEnd=\\\"16dp\\\"\\n        app:layout_constraintTop_toBottomOf=\\\"@+id/dailyForecastTitle\\\"\\n        app:layout_constraintStart_toStartOf=\\\"parent\\\"\\n        app:layout_constraintEnd_toEndOf=\\\"parent\\\"\\n        app:layout_constraintBottom_toBottomOf=\\\"parent\\\"/>\\n\\n</androidx.constraintlayout.widget.ConstraintLayout>\",\n  \"AndroidManifest.xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<manifest xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"\\n    package=\\\"com.example.myawesomeapp\\\">\\n\\n    <uses-permission android:name=\\\"android.permission.ACCESS_FINE_LOCATION\\\" />\\n    <uses-permission android:name=\\\"android.permission.ACCESS_COARSE_LOCATION\\\" />\\n    <uses-permission android:name=\\\"android.permission.INTERNET\\\" />\\n\\n    <application\\n        android:allowBackup=\\\"true\\\"\\n        android:icon=\\\"@mipmap/ic_launcher\\\"\\n        android:label=\\\"@string/app_name\\\"\\n        android:roundIcon=\\\"@mipmap/ic_launcher_round\\\"\\n        android:supportsRtl=\\\"true\\\"\\n        android:theme=\\\"@style/Theme.MyAwesomeApp\\\"\\n        android:usesCleartextTraffic=\\\"true\\\">\\n        <activity\\n            android:name=\\\".MainActivity\\\"\\n            android:exported=\\\"true\\\">\\n            <intent-filter>\\n                <action android:name=\\\"android.intent.action.MAIN\\\" />\\n\\n                <category android:name=\\\"android.intent.category.LAUNCHER\\\" />\\n            </intent-filter>\\n        </activity>\\n    </application>\\n\\n</manifest>\",\n  \"build.gradle (app level)\": \"plugins {\\n    id 'com.android.application'\\n}\\n\\nandroid {\\n    namespace 'com.example.myawesomeapp'\\n    compileSdk 33\\n\\n    defaultConfig {\\n        applicationId \\\"com.example.myawesomeapp\\\"\\n        minSdk 24\\n        targetSdk 33\\n        versionCode 1\\n        versionName \\\"1.0\\\"\\n\\n        testInstrumentationRunner \\\"androidx.test.runner.AndroidJUnitRunner\\\"\\n    }\\n\\n    buildTypes {\\n        release {\\n            minifyEnabled false\\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\\n        }\\n    }\\n    compileOptions {\\n        sourceCompatibility JavaVersion.VERSION_1_8\\n        targetCompatibility JavaVersion.VERSION_1_8\\n    }\\n}\\n\\ndependencies {\\n\\n    implementation 'androidx.appcompat:appcompat:1.6.1'\\n    implementation 'com.google.android.material:material:1.9.0'\\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\\n    testImplementation 'junit:junit:4.13.2'\\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\\n\\n    // Volley for networking\\n    implementation 'com.android.volley:volley:1.2.1'\\n\\n    // Picasso for image loading\\n    implementation 'com.squareup.picasso:picasso:2.71828'\\n\\n    // Google Play Services Location\\n    implementation 'com.google.android.gms:play-services-location:21.0.1'\\n\\n}\\n\",\n  \"strings.xml\": \"<resources>\\n    <string name=\\\"app_name\\\">MyAwesomeApp</string>\\n    <string name=\\\"location_permission_denied\\\">Location permission denied.</string>\\n</resources>\",\n  \"colors.xml\": \"<resources>\\n    <color name=\\\"purple_200\\\">#FFBB86FC</color>\\n    <color name=\\\"purple_500\\\">#FF6200EE</color>\\n    <color name=\\\"purple_700\\\">#FF3700B3</color>\\n    <color name=\\\"teal_200\\\">#FF03DAC5</color>\\n    <color name=\\\"teal_700\\\">#FF018786</color>\\n    <color name=\\\"black\\\">#FF000000</color>\\n    <color name=\\\"white\\\">#FFFFFFFF</color>\\n</resources>\",\n  \"HourlyForecast.java\": \"package com.example.myawesomeapp;\\n\\npublic class HourlyForecast {\\n    private String time;\\n    private double temperature;\\n    private String iconUrl;\\n\\n    public HourlyForecast(String time, double temperature, String iconUrl) {\\n        this.time = time;\\n        this.temperature = temperature;\\n        this.iconUrl = iconUrl;\\n    }\\n\\n    public String getTime() {\\n        return time;\\n    }\\n\\n    public double getTemperature() {\\n        return temperature;\\n    }\\n\\n    public String getIconUrl() {\\n        return iconUrl;\\n    }\\n}\\n\",\n  \"DailyForecast.java\": \"package com.example.myawesomeapp;\\n\\npublic class DailyForecast {\\n    private String dayOfWeek;\\n    private double temperature;\\n    private String iconUrl;\\n\\n    public DailyForecast(String dayOfWeek, double temperature, String iconUrl) {\\n        this.dayOfWeek = dayOfWeek;\\n        this.temperature = temperature;\\n        this.iconUrl = iconUrl;\\n    }\\n\\n    public String getDayOfWeek() {\\n        return dayOfWeek;\\n    }\\n\\n    public double getTemperature() {\\n        return temperature;\\n    }\\n\\n    public String getIconUrl() {\\n        return iconUrl;\\n    }\\n}\",\n  \"HourlyForecastAdapter.java\": \"package com.example.myawesomeapp;\\n\\nimport android.view.LayoutInflater;\\nimport android.view.View;\\nimport android.view.ViewGroup;\\nimport android.widget.ImageView;\\nimport android.widget.TextView;\\n\\nimport androidx.annotation.NonNull;\\nimport androidx.recyclerview.widget.RecyclerView;\\n\\nimport com.squareup.picasso.Picasso;\\n\\nimport java.util.ArrayList;\\nimport java.util.Locale;\\n\\npublic class HourlyForecastAdapter extends RecyclerView.Adapter<HourlyForecastAdapter.ViewHolder> {\\n\\n    private ArrayList<HourlyForecast> hourlyForecastList;\\n\\n    public HourlyForecastAdapter(ArrayList<HourlyForecast> hourlyForecastList) {\\n        this.hourlyForecastList = hourlyForecastList;\\n    }\\n\\n    @NonNull\\n    @Override\\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.hourly_forecast_item, parent, false);\\n        return new ViewHolder(view);\\n    }\\n\\n    @Override\\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\\n        HourlyForecast hourlyForecast = hourlyForecastList.get(position);\\n        holder.timeTextView.setText(hourlyForecast.getTime());\\n        holder.temperatureTextView.setText(String.format(Locale.getDefault(), \\\"%.1f\u00b0C\\\", hourlyForecast.getTemperature()));\\n        Picasso.get().load(hourlyForecast.getIconUrl()).into(holder.iconImageView);\\n    }\\n\\n    @Override\\n    public int getItemCount() {\\n        return hourlyForecastList.size();\\n    }\\n\\n    public static class ViewHolder extends RecyclerView.ViewHolder {\\n        TextView timeTextView, temperatureTextView;\\n        ImageView iconImageView;\\n\\n        public ViewHolder(@NonNull View itemView) {\\n            super(itemView);\\n            timeTextView = itemView.findViewById(R.id.timeTextView);\\n            temperatureTextView = itemView.findViewById(R.id.temperatureTextView);\\n            iconImageView = itemView.findViewById(R.id.iconImageView);\\n        }\\n    }\\n}\",\n  \"DailyForecastAdapter.java\": \"package com.example.myawesomeapp;\\n\\nimport android.view.LayoutInflater;\\nimport android.view.View;\\nimport android.view.ViewGroup;\\nimport android.widget.ImageView;\\nimport android.widget.TextView;\\n\\nimport androidx.annotation.NonNull;\\nimport androidx.recyclerview.widget.RecyclerView;\\n\\nimport com.squareup.picasso.Picasso;\\n\\nimport java.util.ArrayList;\\nimport java.util.Locale;\\n\\npublic class DailyForecastAdapter extends RecyclerView.Adapter<DailyForecastAdapter.ViewHolder> {\\n\\n    private ArrayList<DailyForecast> dailyForecastList;\\n\\n    public DailyForecastAdapter(ArrayList<DailyForecast> dailyForecastList) {\\n        this.dailyForecastList = dailyForecastList;\\n    }\\n\\n    @NonNull\\n    @Override\\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.daily_forecast_item, parent, false);\\n        return new ViewHolder(view);\\n    }\\n\\n    @Override\\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\\n        DailyForecast dailyForecast = dailyForecastList.get(position);\\n        holder.dayOfWeekTextView.setText(dailyForecast.getDayOfWeek());\\n        holder.temperatureTextView.setText(String.format(Locale.getDefault(), \\\"%.1f\u00b0C\\\", dailyForecast.getTemperature()));\\n        Picasso.get().load(dailyForecast.getIconUrl()).into(holder.iconImageView);\\n    }\\n\\n    @Override\\n    public int getItemCount() {\\n        return dailyForecastList.size();\\n    }\\n\\n    public static class ViewHolder extends RecyclerView.ViewHolder {\\n        TextView dayOfWeekTextView, temperatureTextView;\\n        ImageView iconImageView;\\n\\n        public ViewHolder(@NonNull View itemView) {\\n            super(itemView);\\n            dayOfWeekTextView = itemView.findViewById(R.id.dayOfWeekTextView);\\n            temperatureTextView = itemView.findViewById(R.id.temperatureTextView);\\n            iconImageView = itemView.findViewById(R.id.iconImageView);\\n        }\\n    }\\n}\",\n  \"hourly_forecast_item.xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<LinearLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"\\n    android:layout_width=\\\"wrap_content\\\"\\n    android:layout_height=\\\"wrap_content\\\"\\n    android:orientation=\\\"vertical\\\"\\n    android:padding=\\\"8dp\\\"\\n    android:gravity=\\\"center\\\">\\n\\n    <TextView\\n        android:id=\\\"@+id/timeTextView\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:textSize=\\\"16sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        android:text=\\\"Time\\\"/>\\n\\n    <ImageView\\n        android:id=\\\"@+id/iconImageView\\\"\\n        android:layout_width=\\\"48dp\\\"\\n        android:layout_height=\\\"48dp\\\"\\n        android:contentDescription=\\\"Hourly Weather Icon\\\"/>\\n\\n    <TextView\\n        android:id=\\\"@+id/temperatureTextView\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:textSize=\\\"14sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        android:text=\\\"Temperature\\\"/>\\n\\n</LinearLayout>\",\n  \"daily_forecast_item.xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<LinearLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"\\n    android:layout_width=\\\"match_parent\\\"\\n    android:layout_height=\\\"wrap_content\\\"\\n    android:orientation=\\\"horizontal\\\"\\n    android:padding=\\\"16dp\\\"\\n    android:gravity=\\\"center_vertical\\\">\\n\\n    <TextView\\n        android:id=\\\"@+id/dayOfWeekTextView\\\"\\n        android:layout_width=\\\"0dp\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:layout_weight=\\\"1\\\"\\n        android:textSize=\\\"18sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        android:text=\\\"Day of Week\\\"/>\\n\\n    <ImageView\\n        android:id=\\\"@+id/iconImageView\\\"\\n        android:layout_width=\\\"48dp\\\"\\n        android:layout_height=\\\"48dp\\\"\\n        android:contentDescription=\\\"Daily Weather Icon\\\"/>\\n\\n    <TextView\\n        android:id=\\\"@+id/temperatureTextView\\\"\\n        android:layout_width=\\\"wrap_content\\\"\\n        android:layout_height=\\\"wrap_content\\\"\\n        android:textSize=\\\"16sp\\\"\\n        android:textColor=\\\"@android:color/black\\\"\\n        android:text=\\\"Temperature\\\"/>\\n\\n</LinearLayout>\"\n}\n```", "timestamp": "2025-07-20T12:59:13.427Z"}